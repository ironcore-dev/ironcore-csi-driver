// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: osutils_unix.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../hack/license-header.txt -package os -destination=mock_osutils_unix.go -source osutils_unix.go
//

// Package os is a generated GoMock package.
package os

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	unix "golang.org/x/sys/unix"
	path "k8s.io/utils/path"
)

// MockOSWrapper is a mock of OSWrapper interface.
type MockOSWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockOSWrapperMockRecorder
	isgomock struct{}
}

// MockOSWrapperMockRecorder is the mock recorder for MockOSWrapper.
type MockOSWrapperMockRecorder struct {
	mock *MockOSWrapper
}

// NewMockOSWrapper creates a new mock instance.
func NewMockOSWrapper(ctrl *gomock.Controller) *MockOSWrapper {
	mock := &MockOSWrapper{ctrl: ctrl}
	mock.recorder = &MockOSWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSWrapper) EXPECT() *MockOSWrapperMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockOSWrapper) Exists(linkBehavior path.LinkTreatment, filename string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", linkBehavior, filename)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockOSWrapperMockRecorder) Exists(linkBehavior, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockOSWrapper)(nil).Exists), linkBehavior, filename)
}

// IsNotExist mocks base method.
func (m *MockOSWrapper) IsNotExist(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist.
func (mr *MockOSWrapperMockRecorder) IsNotExist(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MockOSWrapper)(nil).IsNotExist), err)
}

// MkdirAll mocks base method.
func (m *MockOSWrapper) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockOSWrapperMockRecorder) MkdirAll(path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockOSWrapper)(nil).MkdirAll), path, perm)
}

// Open mocks base method.
func (m *MockOSWrapper) Open(path string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", path)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOSWrapperMockRecorder) Open(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOSWrapper)(nil).Open), path)
}

// RemoveAll mocks base method.
func (m *MockOSWrapper) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockOSWrapperMockRecorder) RemoveAll(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockOSWrapper)(nil).RemoveAll), path)
}

// Stat mocks base method.
func (m *MockOSWrapper) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOSWrapperMockRecorder) Stat(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOSWrapper)(nil).Stat), name)
}

// Statfs mocks base method.
func (m *MockOSWrapper) Statfs(path string, buf *unix.Statfs_t) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statfs", path, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Statfs indicates an expected call of Statfs.
func (mr *MockOSWrapperMockRecorder) Statfs(path, buf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statfs", reflect.TypeOf((*MockOSWrapper)(nil).Statfs), path, buf)
}
