// Code generated by MockGen. DO NOT EDIT.
// Source: osutils_unix.go

// Package os is a generated GoMock package.
package os

import (
	os "os"
	exec "os/exec"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOSWrapper is a mock of OSWrapper interface.
type MockOSWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockOSWrapperMockRecorder
}

// MockOSWrapperMockRecorder is the mock recorder for MockOSWrapper.
type MockOSWrapperMockRecorder struct {
	mock *MockOSWrapper
}

// NewMockOSWrapper creates a new mock instance.
func NewMockOSWrapper(ctrl *gomock.Controller) *MockOSWrapper {
	mock := &MockOSWrapper{ctrl: ctrl}
	mock.recorder = &MockOSWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSWrapper) EXPECT() *MockOSWrapperMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockOSWrapper) Command(name string, arg ...string) *exec.Cmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockOSWrapperMockRecorder) Command(name interface{}, arg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockOSWrapper)(nil).Command), varargs...)
}

// IsNotExist mocks base method.
func (m *MockOSWrapper) IsNotExist(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist.
func (mr *MockOSWrapperMockRecorder) IsNotExist(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MockOSWrapper)(nil).IsNotExist), err)
}

// MkdirAll mocks base method.
func (m *MockOSWrapper) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockOSWrapperMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockOSWrapper)(nil).MkdirAll), path, perm)
}

// RemoveAll mocks base method.
func (m *MockOSWrapper) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockOSWrapperMockRecorder) RemoveAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockOSWrapper)(nil).RemoveAll), path)
}

// Stat mocks base method.
func (m *MockOSWrapper) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOSWrapperMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOSWrapper)(nil).Stat), name)
}
