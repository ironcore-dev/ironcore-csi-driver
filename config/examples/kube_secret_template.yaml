# example template to provide other cluster's kube config
apiVersion: v1
kind: Secret
metadata:
  name: kubeconfig-secret
data:
  kubeconfig.yaml: |
    YXBpVmVyc2lvbjogdjENCmNsdXN0ZXJzOg0KLSBjbHVzdGVyOg0KICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSQ2FrTkRRV1UyWjBGM1NVSkJaMGxDUVZSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2RHRlhOWEFLWVROV2FWcFZUa0pOUWpSWVJGUkplRTFFVFhsT1JFVTFUa1JCTUU1R2IxaEVWRTE0VFVSTmVVMTZSVFZPUkVFd1RrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZbGRzZFdGWGRERlpiVlpFVVZSRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVEV4eUNscFRhMDVqYkZkc1pqSmlhRGt4YXpGdGEyVk9ZMjF0ZEVSc1RFTnhNR0Z6VUVwRVVHVjBiREZsYmxCME9GTnZZVVZDTkRneldIYzRiVEJuV25odmF5c0tWM0Z3YkhaVU5VTXJOMWxKTlVwbFIwTkhLMFJ6TVhSVGNFMUhZek5ZYVZOUFRIaDRkbFJRU0ROc1puaDNSbE5uV0VRelYzYzBZM2R0VURSdGVITnZSQXBzZVc1SmFIUlZTREJFWVdNdmNXdExkREY2WkhKSlNIQndjbFpYWTJWQ1MwRnhTbEJRWm1sdGVuRk9UMkk1V2pZdmJXSjBhQzlhYVRsUmMzVk5WRE5MQ25BNGNFWkhPVUZyVEhodmVsRnBiMjlwWmxkdFRFWkdUVUp1WjI5RVVUZElSWEp5TnpGVFltVnNVUzgzTTFkdk56VlVUaXRuYlVvMFFtSm5hVVZEWW5VS2JWZEJVSFppV2tKdFMyMU9XVWd2U2tkbGIyZFZaMDFLVG5kUFV6a3ljR3MyYW1vMWRFUnBkVVkzVGt4R1dVZDZaV1ZZUkRGQlEyOWhOVUpXYm1GMFVnbzJZbTQ0V1M5T01VdE5kWEpLWnl0Q2FrNVZRMEYzUlVGQllVNW9UVVk0ZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVSXdSMEV4VldSS1VWRlhDazFDVVVkRFEzTkhRVkZWUmtKM1RVTkNaMmR5UW1kRlJrSlJZMFJCVkVGUVFtZE9Wa2hTVFVKQlpqaEZRbFJCUkVGUlNDOU5RakJIUVRGVlpFUm5VVmNLUWtKU1JEWnZLMFJtUm5WT1NucEZWRE5QVUVGVFFYUlpOV3BVYUZoRVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVRlBRMEZSUlVGTmQzVk9iMUJrVVFwUWNYbE5ZaXRLVkhSeGFFZGhSRmRtYjFkdWVXZEtOVEZtYkZwRk9IWTRVVko1WWxkSWEwMVZUVGxxY1RWemRrUmtObWhWVEM5aWQxVk5TVlpaVTFNeENrSmpPR1Y1V2xGbFVtRmlhbXREWVVWUVZuQTNiVnBvUzJGR1ltRndkRFJJTmpGRFdURlhiMGxSYzI5MEwwMUZSRzF1Wm1GQlpVRndiMlpYU25KeWJGQUtPV1JvVlZKdFpsUk5SM1pUYjFFM1NXTldlbnA2VjNBeFNtcGFZMnhOVTI5MllVdFZXamx5T0V0RVRqSlpXRmxLVDBaWlUxcExaakF5ZFhwelZGTkJXQXBQUjJ0QllsTlJNWEJNVjFkTGJrZEhkbmQyTTFGUGEzcG5XVzlKZVRJM1NHeFZaVE5CVmpKVU9VMW1jMUF2VlZJNFpWZHlTamhGZFhoUU9IcFNlVFpTQ2tkcWMxQXpXa2hqV0RWa1ptdHBTREJ3TTJ0NWVHUktVa3hwTWxkbEwyOHJORTFITUdWUlVXdG5PV2xrWTA1dmVUSm1OSGN6ZDA5RVdXdzVSM1ZDWjI0S2JtcEtWSEYyYmtOWlEwdDJRWGM5UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQ0KICAgIGV4dGVuc2lvbnM6DQogICAgLSBleHRlbnNpb246DQogICAgICAgIGxhc3QtdXBkYXRlOiBUdWUsIDE1IEZlYiAyMDIyIDE2OjQ1OjU1IElTVA0KICAgICAgICBwcm92aWRlcjogbWluaWt1YmUuc2lncy5rOHMuaW8NCiAgICAgICAgdmVyc2lvbjogdjEuMTguMQ0KICAgICAgbmFtZTogY2x1c3Rlcl9pbmZvDQogICAgc2VydmVyOiBodHRwczovLzE5Mi4xNjguNDkuMjo4NDQzDQogIG5hbWU6IG1pbmlrdWJlDQpjb250ZXh0czoNCi0gY29udGV4dDoNCiAgICBjbHVzdGVyOiBtaW5pa3ViZQ0KICAgIGV4dGVuc2lvbnM6DQogICAgLSBleHRlbnNpb246DQogICAgICAgIGxhc3QtdXBkYXRlOiBUdWUsIDE1IEZlYiAyMDIyIDE2OjQ1OjU1IElTVA0KICAgICAgICBwcm92aWRlcjogbWluaWt1YmUuc2lncy5rOHMuaW8NCiAgICAgICAgdmVyc2lvbjogdjEuMTguMQ0KICAgICAgbmFtZTogY29udGV4dF9pbmZvDQogICAgbmFtZXNwYWNlOiBkZWZhdWx0DQogICAgdXNlcjogbWluaWt1YmUNCiAgbmFtZTogbWluaWt1YmUNCmN1cnJlbnQtY29udGV4dDogbWluaWt1YmUNCmtpbmQ6IENvbmZpZw0KcHJlZmVyZW5jZXM6IHt9DQp1c2VyczoNCi0gbmFtZTogbWluaWt1YmUNCiAgdXNlcjoNCiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsQ1FXcEJUa0puYTNGb2EybEhPWGN3UWtGUmMwWkJSRUZXVFZKTmQwVlJXVVJXVVZGRVJYZHdkR0ZYTlhBS1lUTldhVnBWVGtKTlFqUllSRlJKZVUxRVNYaE9SRVY0VFZSVmQwNHhiMWhFVkVsNlRVUkplRTVVUlhoTlZGVjNUakZ2ZDAxVVJWaE5RbFZIUVRGVlJRcERhRTFQWXpOc2VtUkhWblJQYlRGb1l6TlNiR051VFhoR2FrRlZRbWRPVmtKQlRWUkVWekZ3WW0xc2NtUlhTbXhNV0ZaNldsaEpkMmRuUldsTlFUQkhDa05UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkVXR3hSVFVGeVQzQlNOWEJFUldndlJYZzFhVTlYZWt0QlIwRmlVbTBLT0VSNEswWlBZbEJXWWxoVmVGbGlUVEJCUVVoS1VrVktZMmxDV2pWbk5uQk9WbGxIZW1jeWNEUjJiMDk2TDBoV1pIVk5kVkJXYkRKbk1YQmllRWg1T0Fvd2VsTXpkV1pMTWs5TGVua3pMMkZZZFRjeGNEUklOMXBQWWxoVVlsbG5Ra2w1YkcxTWRHZzBURVF6WW1GTVNIZHJRa0Z3Tm5aNFNGRnRjWFV3WVVrdkNrUllXVVoxV2xoeVZsWlpjMDFGT1hkMVZUVlplRkoxU2pkV1ptNHJOakJFZDFkTlJYZHJOV0pxVlVSMmFtbHVhVmQwT1dSalNFNTFZbXh6UkZZMldFMEtUV1JCTUhNcmFEWTVRbkU1YW5OVVlWWjFUV2xsVlUxV2FsTldRVmhrYkRjeGFHWnFkVVptYlZWelFrOHZPVlpzVGt4Mk5IWm9hRXRKVDFGNEwydHZNUW96ZUhGaU5GWTRXbGhsVFV0WmNHZFpiekpvU3pRMlIzcGFPR2hESzBVMFRUZG9aVXRuY2tsT0sxSk9hRkExZUU1dmNrWk5SUzh4U2tGblRVSkJRVWRxQ2xsRVFtVk5RVFJIUVRGVlpFUjNSVUl2ZDFGRlFYZEpSbTlFUVdSQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCVVZsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlNSRFp2SzBSbVJuVk9TbnBGVkROUFVFRlRRWFJaTldwVWFBcFlSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJUWFp6ZDAwME1FUkxkMkpSV0dZMFNYZGhVMko2TW5OM1JESlVSbE5PZUZKeU5ERkNDbTlLV1RBd1kxQlhka1ZVUTFnelRFZDFVMUpoZG5SUE4zSnVTRTlqTWxkclowUnNLMmxJVWtrMlVXWmhkRU5KYVdsM2NsTnFRVEV4VFhCdmRHbGpaVXNLVVd4YVNUaFVNSFE1S3pWaGJYaHhhR1Z1VGxweFlVMWhRVWxRV2pWUlQyUXZjVWxEVW5WeE4yaDZNMU12VFdKV1UwVjZkV2g1V25wUlZGWmhSRUpwTVFvek4wOXVhRmRVVTJwTmVGb3plRUpQVkRZNWEzcFpTM0kwVFZJeVN6QmhhVFZzWmpWaU5FOHZlRkYwYlhkbWVuaDRTSEUyY0hsVlNYQmtReXRLU21ob0NtOVFaa2Q1U1RCRlVVcEZOQ3RLY3pWSFlVdzNWemRLU0dObVRIZDRjMEpqVTNvM1prUmpjR1kyY0RsWmQwUXdkMjFDSzJzd01tSnRXR0Z3U2xkcWJtUUtXVU0wVkdObFVtUTJUVmh5VlhkMVYyVnVRamhrWlVaVUwwVkpORXRuTTBKV1l5OHpjME5ZVmpaRlNHVnVkVEk1Y0ZFOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0NCiAgICBjbGllbnQta2V5LWRhdGE6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmIzZEpRa0ZCUzBOQlVVVkJNVFZWUkVGTGVuRlZaV0ZSZUVsbWVFMWxXV3BzYzNsblFtZEhNRnAyUVRobWFGUnRlakZYTVRGTlYwZDZUa0ZCQ2tKNVZWSkRXRWxuVjJWWlQzRlVWbGRDY3pST2NXVk1Oa1J6TDNneFdHSnFUR294V21SdlRtRlhPRkk0ZGs1Tk1IUTNibmwwYW1sek9IUXZNbXczZFRrS1lXVkNLekpVYlRFd01qSkpRVk5OY0ZwcE4xbGxRM2M1TWpKcGVEaEtRVkZMWlhJNFVqQktjWEowUjJsUWR6RXlRbUp0VmpZeFZsZE1SRUpRWTB4c1R3cFhUVlZpYVdVeFdEVXZkWFJCT0VacVFrMUtUMWMwTVVFM05EUndOR3h5WmxoWVFucGliVFZpUVRGbGJIcEVTRkZPVEZCdlpYWlJZWFpaTjBVeWJHSnFDa2x1YkVSR1dUQnNVVVl6V21VNVdWZzBOMmhZTld4TVFWUjJMMVphVkZNM0swdzBXVk5wUkd0TlpqVkxUbVE0WVcwclJtWkhWak5xUTIxTFdVZExUbThLVTNWUGFITXlaa2xSZG1oUFJFODBXR2x2UzNsRVptdFVXVlFyWTFSaFMzaFVRbEE1VTFGSlJFRlJRVUpCYjBsQ1FVZDBZVVppZFhoWU5raFlSMk5JTUFwSVFWTkpTVXhNU1ZKUGRWbDZOMloxTmpSRGVHTmtjRkJUVWs5cFNsTlZObU55YTJOSFUySkhRVkozYWs1eGRrZEdiMlZsT1dscWFVVlViSFJFV0ZWTENrWmphMEl6Wkc1d1VWRmhkbWx3YjFFMWNFTlRPVk13VDJabWExZ3dPV3AwVFZRMVZ5OHpUekpxUkdWNmRFZFZNRzFFYmpsSEsybEVlREl6U2pkamJtOEtVVEZTVFZselNYUmlZV2xQVm1GbWJWVlNORFp6TVVGVlJqWjNObTVDZFdST1lVOVpRVWRtZUdZdlQwWmljamg1YUdKblIycDBXRTVPUm14S1RVTTJRd3BPZEVKVlMxWm5RV05CTkhsSUwwUkxTbmR4VkVGbU1qUk1hVlJLTld4SWNtNVFTM0JKSzFBdloweERjMEoyS3psTlNtSm5kVFJqWjFSbFdITTJORVkwQ2pFemIzSldRM0JsYlRkMFdteE9VbHBzVUVzMGVVOXpSbFEyVFVkalQzRXplVEEzVlU1aFZYTmtjbVo2V0ZoNWRuRlZSRGxhVm1Od2RHdG5iR2h0VUVzS1dFaFhielExTUVObldVVkJPVEl6UWxCbVFYSlRTR3hSVWxGaVJXdDBjSE5CUm5KcE1EVmlOMWxUWTNSMVozUjFVMGhVWmpkSVNtdHlVbkV5V1ZFdlR3cFFPR0pWWmtwTlVWbGpibWxOVTBGdk5YZFdjVGhOYmtOd1lWZEpWVXBPVVc0eFFVUllha2R5VkRSMFVFcFJaMFpzUzJnMlNYRk5TV2MxU25walpGWXpDa2xRU210WFJrZEpiamxqYTFaak9EQmlVbXhSTHpsT1EwbEVaME01UkVrMVNqZFFSVWN5VEV4cFRuTnZla1ZwTmt3d1JtOVBLMk5EWjFsRlFUTjNlbFlLY21sNmMybFJTRVl4TTA1elVVNXdSM00xVEZwQlJrTmtWREV4VjBwRVZIaG1WbkowWVVOWGNsZzROREZrU0VGblNYSlNiMjVXVUVwbVptaDZaRU5sTndvNEsxQXlNSE5qUkhZM1kxcGxRMlZWYm1GbldtaFdORTU1ZUVWUVkyWlhUM2xOWjBWNE1WZFRTSFYwWVM5cmRuZzFSamRDTmxKT1lsSjVTMjh6ZVRScUNrMXRWM1oyZVROVlNqVkxhMHR3SzBoS2JVbGxSekJJVkN0S1F6SlFTbXRaS3l0c1ExWXdPRU5uV1VGd0wxaFNXVUZLVVRNemJUWnBOa1F3WmpsMlZuZ0tUV1owWjJ0VVZHdEVabEZUY1V4SU1HeG1SVk5tVnpsalpWUlpUMVIwU21aMlIzZ3ZTRFkwWlVOc1ltRnZNbmxPYlVSMlNERldWekZMZEhoNFdVTTNSUXBsY0RJemRFcEpkMFUyU2tFeFNsZDBNM1JIY2xsNVQydDNTWFpoS3pkRlZqVkZlbTVQUWpoS2ExVmtXRlZMZWtNdmVFeG9PVFJaTTFaWmIyRjVlRTF6Q2tNM1VIbFBaR1l3ZURoNWNYSnZWRFpXUVRGUFlsRkxRbWRGYTNKcllrWnZjRlpQZDJ4RVJrRmxVVTk0Vm5vMGVtSjVTblZVTlhsdlpITnBOelJZYVVrS05uQmhaWFpQUWxvMmFXc3ZWM2gwYm1GWFdYSkNWVGxuZDB0allraGpiemxRTUhkWU5Ib3ZlVVprV0ZoNmFWbEdOMmhHVmsxR2MzTlNieTlSZVZReFR3cGxSbkpZTVVjMU1rMU5lRFZLTW05UFRqZG9OVVpDYkRZMGEwVk5hSEJzVTNsR2RVUTRhbEJzU2tKMWFsbzFaVTB5YlcxQmNEaFFSRE5VVWpFeVREbFRDak4xVGpkQmIwZENRVTU2Unl0ck9HSXJRM2huWTNRMk56Rllla2RNWWpSSWNXSnpZbVl5U0hKbFlWVlRjbkpMVGtneE1sVjRkVkZuV1hWMVIySkNjbkFLUzBOTmVsSXlZMHByVDJZdlNqaHFkR3BTZWs1UE9YRlhWM052VjBGMU0yVnViVGRtVkZSSGNXOXdaVEZKUldGclVrOVZZMU5LZDFwTWMxQk9ZMU0wYndvMlVHRnVlV3hSTmxOdE1FRkNZVkk0YzJkRE1XVkpVR2hTU0VONFZWZGFNek5XVVdOSE4yNWxaMmx6UlVveVQwWjBTVko0Q2kwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0=